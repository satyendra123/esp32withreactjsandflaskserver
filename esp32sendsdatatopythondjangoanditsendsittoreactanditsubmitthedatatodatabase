//EXAMPLE-1 Esp32 code
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Airtel_tejv_3002";  // WiFi SSID
const char* password = "air73137";      // WiFi password

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Simulate reading sensor data
  int voltage = random(0, 12);
  int current = random(0, 3);
  int watt = random(28, 32);
  int average = random(50, 95);

  // Create JSON data
  String postData = "{\"voltage\":" + String(voltage) + ",\"current\":" + String(current) + ",\"watt\":" + String(watt) + ",\"average\":" + String(average) + "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String serverPath = "http://192.168.1.23:3000/api/sensordata";  // Replace with the correct IP address and port

    // Log the endpoint and data
    Serial.println("Posting to: " + serverPath);
    Serial.println("PostPacket: " + postData);
    
    http.begin(serverPath);
    http.addHeader("Content-Type", "application/json");  // Changed to application/json

    int httpResponseCode = http.POST(postData);

    // Print HTTP response code and payload
    Serial.print("httpCode: ");
    Serial.println(httpResponseCode);

    if (httpResponseCode > 0 && httpResponseCode < 400) {
      String response = http.getString();
      Serial.println(response);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }

  delay(10000);  // Send data every 10 seconds
}

//EXAMPLE-2 react js code 
//a) Esp32form.js
//EXAMPLE-1 
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Esp32form.css';

const Esp32form = () => {
  const [formData, setFormData] = useState({
    name: '',
    age: '',
    rollNumber: '',
    class: '',
    voltage: '',
    current: '',
    watt: '',
    average: ''
  });

  useEffect(() => {
    axios.get('http://192.168.1.29:3000/api/sendsensordata')
      .then(response => {
        const { voltage, current, watt, average } = response.data;
        setFormData(prevState => ({
          ...prevState,
          voltage,
          current,
          watt,
          average
        }));
      })
      .catch(error => {
        console.error('Error fetching sensor data', error);
      });
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    axios.post('http://localhost:8000/api/submit-form/', formData)
      .then(response => {
        console.log('Data submitted successfully', response);
      })
      .catch(error => {
        console.error('Error submitting data', error);
      });
  };

  return (
    <div className="form-container">
      <form onSubmit={handleSubmit}>
        <label htmlFor="name">Name</label>
        <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} placeholder="Name" required />

        <label htmlFor="age">Age</label>
        <input type="number" id="age" name="age" value={formData.age} onChange={handleChange} placeholder="Age" required />

        <label htmlFor="rollNumber">Roll Number</label>
        <input type="text" id="rollNumber" name="rollNumber" value={formData.rollNumber} onChange={handleChange} placeholder="Roll Number" required />

        <label htmlFor="class">Class</label>
        <input type="text" id="class" name="class" value={formData.class} onChange={handleChange} placeholder="Class" required />

        <label htmlFor="voltage">Voltage</label>
        <input type="text" id="voltage" name="voltage" value={formData.voltage} onChange={handleChange} placeholder="Voltage" readOnly />

        <label htmlFor="current">Current</label>
        <input type="text" id="current" name="current" value={formData.current} onChange={handleChange} placeholder="Current" readOnly />

        <label htmlFor="watt">Watt</label>
        <input type="text" id="watt" name="watt" value={formData.watt} onChange={handleChange} placeholder="Watt" readOnly />

        <label htmlFor="average">Average</label>
        <input type="text" id="average" name="average" value={formData.average} onChange={handleChange} placeholder="Average" readOnly />

        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default Esp32form;


//b) Footer.js
import React from 'react'
function Footer() {
  return (

    <div className="container-fluid">
        <footer style={{
            backgroundColor:'#03011C',
            padding:100,
            display:'flex',
            justifyContent:'space-between',
        }}>
            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'400px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. dummy text of the printing and typesetting industry. </p>
            </div>
        
            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Usefull links</h2>
                <ul style={{color:'white', 
                listStyle:'none',
                padding:0, 
                margin:0,
                display:'flex',
                flexDirection:'column',
                gap:'8px'

                }}>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Home</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Number</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Whatsapp</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Contact us</a></li>
                </ul>
            </div>

            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'200px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
            </div>

            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'200px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
            </div>

       </footer>
</div>
  )
}

export default Footer

//c) Nav.js
import React from 'react'
import './Nav.css'

function Nav() {
  return (
    <nav style={{
      backgroundColor: 'white',
      display: 'flex',
      justifyContent: 'space-between',
      padding: '0 48px',
      boxShadow: '0 16px 8px 0 rgba(0,0,0,0.1)'
    }}>
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '8px',
      }}>
        <img src="./images/logo.jpeg" alt="Logo" width="60" />
        <a href="#" style={{
          textDecoration: 'none',
          color:'#323232',
          margin:'10px',
        }}><h1>Houston System</h1></a>
      </div>

      <ul style={{
        display: 'flex',
        listStyle: 'none',
        padding: 0,
        margin: 0,
        gap: '10px',
        alignItems: 'center'
      }}>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Home</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Teachers</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Holiday</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center' ,padding:'16px 24px' }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Login</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center', padding:'16px 24px' }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: 'white',
            fontSize:17,
            background:'dodgerblue',
            padding:'16px 48px',
            borderRadius:4,

          }}>Talk to us</a>
        </li>
      </ul>
    </nav>
  )
}

export default Nav

//d) Section.js
// TypingComponent.js
import React from 'react';
import { TypeAnimation } from 'react-type-animation';

const Section = () => {
  return (
    <div>
      <h1>Typing Animation Example</h1>
      <TypeAnimation
        sequence={[
          'Hello, world!', // Types 'Hello, world!'
          1000, // Waits 1s
          'Hello, React!', // Deletes 'Hello, world!' and types 'Hello, React!'
          1000, // Waits 1s
          'Hello, Type Animation!', // Deletes 'Hello, React!' and types 'Hello, Type Animation!'
          1000, // Waits 1s
          'Goodbye!', // Deletes 'Hello, Type Animation!' and types 'Goodbye!'
          1000, // Waits 1s
        ]}
        wrapper="span"
        cursor={true}
        repeat={Infinity}
      />
    </div>
  );
};

export default Section;

//e) index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import Nav from './Components/Nav';
import reportWebVitals from './reportWebVitals';
import Footer from './Components/Footer';
import Esp32form from './Components/Esp32form';
import Section from './Components/Section';
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App/>
    <Nav/>
    <Esp32form/>
    <Section/>
    <Footer/>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

//EXAMPLE-3 python django code
//a) views.py
from django.http import JsonResponse
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import SensorData
from .serializers import SensorDataSerializer

# In-memory store for the latest sensor data
latest_sensor_data = None

@api_view(['POST'])
def receive_sensor_data(request):
    global latest_sensor_data
    data = request.data
    print("Received data:", data)  # Debugging line
    latest_sensor_data = data
    return JsonResponse({"status": "success"}, status=201)

@api_view(['GET'])
def get_latest_sensor_data(request):
    global latest_sensor_data
    if latest_sensor_data is not None:
        return JsonResponse(latest_sensor_data, status=200)
    else:
        return JsonResponse({"error": "No data available"}, status=404)


@api_view(['POST'])
def submit_form(request):
    data = request.data

    # Save to the database
    serializer = SensorDataSerializer(data=data)
    if serializer.is_valid():
        serializer.save()
        print("Data saved successfully:", data)  # Debugging line
        return JsonResponse({"status": "success"}, status=201)
    else:
        print("Validation errors:", serializer.errors)  # Debugging line
        return JsonResponse(serializer.errors, status=400)

// b) urls.py
from django.urls import path
from .views import receive_sensor_data, get_latest_sensor_data, submit_form

urlpatterns = [
    path('api/sensordata', receive_sensor_data, name='receive_sensor_data'),
    path('api/sensordata/latest', get_latest_sensor_data, name='get_latest_sensor_data'),
    path('api/submit-form', submit_form, name='submit_form'),
]

// b) main urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('attendance.urls')),
]
// c) serializers.py
from rest_framework import serializers
from .models import SensorData

class SensorDataSerializer(serializers.ModelSerializer):
    class Meta:
        model = SensorData
        fields = ['id', 'voltage', 'current', 'watt', 'average', 'name', 'age', 'rollNumber', 'Class', 'timestamp']

//d) models.py
from django.db import models
# Create your models here.
class SensorData(models.Model):
    voltage = models.FloatField()
    current = models.FloatField()
    watt = models.FloatField()
    average = models.FloatField()
    name = models.CharField(max_length=100)
    age = models.IntegerField()
    rollNumber = models.IntegerField()
    Class = models.IntegerField()
    timestamp = models.DateTimeField(auto_now_add=True)

//e) settings.py
"""
Django settings for school project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v5@hz)&s###i!!ug-5*+g#!hf9%0vpsxuftp)^d%j5(=n2e+)3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.1.23']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'attendance.apps.AttendanceConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'school.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'school.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''
DATABASES = {
    'default': {
    'ENGINE': 'django.db.backends.mysql',
    'NAME': 'attendance',
    'USER': 'root',
    'PASSWORD': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_ALL_HEADERS=True

CORS_ALLOWED_ORIGINS = [
    "http://192.168.1.23:3000",
    "http://192.168.1.23:3000",  # Add any additional origins if needed
]
