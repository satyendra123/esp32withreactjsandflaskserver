//Note: a) http://192.168.1.23:3000/api/sensordata i have used my system ip in this, 
        b) flask server is running with the same port in which esp32 is running. and the ip is 0.0.0.0 means it accepts any ip with the port 3000. so data will be received.
        c) my react js is always running on port 3000 but this time we can not use it with the port 3000. so we need to change the port of the react js http://localhost:3001/


//esp32 code
#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "Airtel_tejv_3002";  // WiFi SSID
const char* password = "air73137";      // WiFi password

void setup() {
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println();
  Serial.println("Connected to WiFi");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}

void loop() {
  // Simulate reading sensor data
  int voltage = random(0, 12);
  int current = random(0, 3);
  int watt = random(28, 32);
  int average = random(50, 95);

  // Create JSON data
  String postData = "{\"voltage\":" + String(voltage) + ",\"current\":" + String(current) + ",\"watt\":" + String(watt) + ",\"average\":" + String(average) + "}";

  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    String serverPath = "http://192.168.1.23:3000/api/sensordata";  // Replace with the correct IP address and port

    // Log the endpoint and data
    Serial.println("Posting to: " + serverPath);
    Serial.println("PostPacket: " + postData);
    
    http.begin(serverPath);
    http.addHeader("Content-Type", "application/json");  // Changed to application/json

    int httpResponseCode = http.POST(postData);

    // Print HTTP response code and payload
    Serial.print("httpCode: ");
    Serial.println(httpResponseCode);

    if (httpResponseCode > 0 && httpResponseCode < 400) {
      String response = http.getString();
      Serial.println(response);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected");
  }

  delay(10000);  // Send data every 10 seconds
}

//ARduino output will be look like this   
10:50:53.178 -> Posting to: http://192.168.1.23:3000/api/sensordata
10:50:53.178 -> PostPacket: {"voltage":6,"current":2,"watt":29,"average":77}
10:50:54.078 -> httpCode: 200
10:50:54.078 -> {"status":"success"}



//EXAMPLE-2 flask server code
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

sensor_data = None

@app.route('/api/sensordata', methods=['POST'])
def receive_sensor_data():
    global sensor_data
    try:
        sensor_data = request.json  # Store the JSON data sent by the ESP32
        print(sensor_data)  # Print the received data
        return jsonify({"status": "success"}), 200  # Respond with a success message
    except Exception as e:
        print(f'Error receiving data: {e}')
        return jsonify({"status": "error"}), 400

@app.route('/api/sensordata', methods=['GET'])
def get_sensor_data():
    global sensor_data
    if sensor_data:
        return jsonify(sensor_data), 200
    else:
        return jsonify({"error": "No data available"}), 404

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=3000)

//EXAMPLE-3 react js fronted code to receive and display the data from the flask server backened to react js fronted.
//a) Esp32form.js
import React, { useState, useEffect } from 'react';
const Esp32form= () => {
  const [sensorData, setSensorData] = useState(null);
useEffect(() => {
  const fetchData = async () => {
    try {
      const response = await fetch('http://192.168.1.23:3000/api/sensordata');
      
      // Check for a 403 status code
      if (response.status === 403) {
        throw new Error('Forbidden');
      }

      const data = await response.json();
      setSensorData(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  // Fetch data initially
  fetchData();

  // Fetch data every 10 seconds
  const intervalId = setInterval(fetchData, 10000);

  // Clean up interval
  return () => clearInterval(intervalId);
}, []);

return (
  <div>
    {sensorData ? (
      <div>
        <h2>Sensor Data</h2>
        <p>Voltage: {sensorData.voltage}</p>
        <p>Current: {sensorData.current}</p>
        <p>Watt: {sensorData.watt}</p>
        <p>Average: {sensorData.average}</p>
      </div>
    ) : (
      <p>No sensor data available</p>
    )}
  </div>
);
};

export default Esp32form;

//b) Nav.js
import React from 'react'
import './Nav.css'

function Nav() {
  return (
    <nav style={{
      backgroundColor: 'white',
      display: 'flex',
      justifyContent: 'space-between',
      padding: '0 48px',
      boxShadow: '0 16px 8px 0 rgba(0,0,0,0.1)'
    }}>
      <div style={{
        display: 'flex',
        alignItems: 'center',
        gap: '8px',
      }}>
        <img src="./images/logo.jpeg" alt="Logo" width="60" />
        <a href="#" style={{
          textDecoration: 'none',
          color:'#323232',
          margin:'10px',
        }}><h1>Houston System</h1></a>
      </div>

      <ul style={{
        display: 'flex',
        listStyle: 'none',
        padding: 0,
        margin: 0,
        gap: '10px',
        alignItems: 'center'
      }}>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Home</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Teachers</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center',padding:'16px 24px'  }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Holiday</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center' ,padding:'16px 24px' }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: '#323232',
          }}>Login</a>
        </li>
        <li style={{ display: 'flex', alignItems: 'center', padding:'16px 24px' }}>
          <a href="#" style={{
            textDecoration: 'none',
            color: 'white',
            fontSize:17,
            background:'dodgerblue',
            padding:'16px 48px',
            borderRadius:4,

          }}>Talk to us</a>
        </li>
      </ul>
    </nav>
  )
}

export default Nav

//c) Footer.js
import React from 'react'
function Footer() {
  return (

    <div className="container-fluid">
        <footer style={{
            backgroundColor:'#03011C',
            padding:100,
            display:'flex',
            justifyContent:'space-between',
        }}>
            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'400px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. dummy text of the printing and typesetting industry. </p>
            </div>
        
            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Usefull links</h2>
                <ul style={{color:'white', 
                listStyle:'none',
                padding:0, 
                margin:0,
                display:'flex',
                flexDirection:'column',
                gap:'8px'

                }}>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Home</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Number</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Whatsapp</a></li>
                    <li><a href="#" style={{textDecoration:'none', color:'white'}}>Contact us</a></li>
                </ul>
            </div>

            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'200px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
            </div>

            <div>
                <h2 style={{ color:'#f5f5f5' , fontWeight:'500px' }}>Code school</h2>
                <p style={{color:'white', width:'200px'}}>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p>
            </div>

       </footer>
</div>
  )
}

export default Footer

//d) index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import Nav from './Components/Nav';
import reportWebVitals from './reportWebVitals';
import Footer from './Components/Footer';
import Esp32form from './Components/Esp32form';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App/>
    <Nav/>
    <Esp32form/>
    <Footer/>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

//e) Section.js
import React from 'react';
import { TypeAnimation } from 'react-type-animation';

const Section = () => {
  return (
    <div>
      <h1>Typing Animation Example</h1>
      <TypeAnimation
        sequence={[
          'Hello, world!', // Types 'Hello, world!'
          1000, // Waits 1s
          'Hello, React!', // Deletes 'Hello, world!' and types 'Hello, React!'
          1000, // Waits 1s
          'Hello, Type Animation!', // Deletes 'Hello, React!' and types 'Hello, Type Animation!'
          1000, // Waits 1s
          'Goodbye!', // Deletes 'Hello, Type Animation!' and types 'Goodbye!'
          1000, // Waits 1s
        ]}
        wrapper="span"
        cursor={true}
        repeat={Infinity}
      />
    </div>
  );
};

export default Section;
